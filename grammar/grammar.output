Grammar

    0 $accept: program $end

    1 program: declaration_list

    2 declaration_list: declaration_list declaration
    3                 | declaration

    4 declaration: var_declaration
    5            | fun_declaration

    6 var_declaration: type_specifier ID ';'
    7                | type_specifier ID '[' NUM ']' ';'

    8 type_specifier: "int"
    9               | "void"

   10 fun_declaration: type_specifier ID '(' params ')' compound_stmt

   11 params: param_list
   12       | "void"

   13 param_list: param_list ',' param
   14           | param

   15 param: type_specifier ID
   16      | type_specifier ID '[' ']'

   17 compound_stmt: '{' local_declarations statement_list '}'

   18 local_declarations: local_declarations var_declaration
   19                   | /* empty */

   20 statement_list: statement_list statement
   21               | /* empty */

   22 statement: expression_stmt
   23          | compound_stmt
   24          | selection_stmt
   25          | iteration_stmt
   26          | return_stmt
   27          | switch_stmt

   28 expression_stmt: expression ';'
   29                | "break" ';'
   30                | ';'

   31 selection_stmt: "if" '(' expression ')' statement "endif"
   32               | "if" '(' expression ')' statement "else" statement "endif"

   33 iteration_stmt: "while" '(' expression ')' statement

   34 return_stmt: "return" ';'
   35            | "return" expression ';'

   36 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}'

   37 case_stmts: case_stmts case_stmt
   38           | /* empty */

   39 case_stmt: "case" NUM ':' statement_list

   40 default_stmt: "default" ':' statement_list
   41             | /* empty */

   42 expression: var '=' expression
   43           | simple_expression

   44 var: ID
   45    | ID '[' expression ']'

   46 simple_expression: additive_expression relop additive_expression
   47                  | additive_expression

   48 relop: '<'
   49      | "=="

   50 additive_expression: additive_expression addop term
   51                    | term

   52 addop: '+'
   53      | '-'

   54 term: term mulop factor
   55     | factor

   56 mulop: '*'
   57      | '/'

   58 factor: '(' expression ')'
   59       | var
   60       | call
   61       | NUM

   62 call: ID '(' args ')'

   63 args: arg_list
   64     | /* empty */

   65 arg_list: arg_list ',' expression
   66         | expression


Terminals, with rules where they appear

$end (0) 0
'(' (40) 10 31 32 33 36 58 62
')' (41) 10 31 32 33 36 58 62
'*' (42) 56
'+' (43) 52
',' (44) 13 65
'-' (45) 53
'/' (47) 57
':' (58) 39 40
';' (59) 6 7 28 29 30 34 35
'<' (60) 48
'=' (61) 42
'[' (91) 7 16 45
']' (93) 7 16 45
'{' (123) 17 36
'}' (125) 17 36
error (256)
NUM (258) 7 39 61
ID (259) 6 7 10 15 16 44 45 62
"int" (260) 8
"void" (261) 9 12
"break" (262) 29
"if" (263) 31 32
"endif" (264) 31 32
"else" (265) 32
"while" (266) 33
"return" (267) 34 35
"switch" (268) 36
"case" (269) 39
"default" (270) 40
"==" (271) 49


Nonterminals, with rules where they appear

$accept (32)
    on left: 0
program (33)
    on left: 1, on right: 0
declaration_list (34)
    on left: 2 3, on right: 1 2
declaration (35)
    on left: 4 5, on right: 2 3
var_declaration (36)
    on left: 6 7, on right: 4 18
type_specifier (37)
    on left: 8 9, on right: 6 7 10 15 16
fun_declaration (38)
    on left: 10, on right: 5
params (39)
    on left: 11 12, on right: 10
param_list (40)
    on left: 13 14, on right: 11 13
param (41)
    on left: 15 16, on right: 13 14
compound_stmt (42)
    on left: 17, on right: 10 23
local_declarations (43)
    on left: 18 19, on right: 17 18
statement_list (44)
    on left: 20 21, on right: 17 20 39 40
statement (45)
    on left: 22 23 24 25 26 27, on right: 20 31 32 33
expression_stmt (46)
    on left: 28 29 30, on right: 22
selection_stmt (47)
    on left: 31 32, on right: 24
iteration_stmt (48)
    on left: 33, on right: 25
return_stmt (49)
    on left: 34 35, on right: 26
switch_stmt (50)
    on left: 36, on right: 27
case_stmts (51)
    on left: 37 38, on right: 36 37
case_stmt (52)
    on left: 39, on right: 37
default_stmt (53)
    on left: 40 41, on right: 36
expression (54)
    on left: 42 43, on right: 28 31 32 33 35 36 42 45 58 65 66
var (55)
    on left: 44 45, on right: 42 59
simple_expression (56)
    on left: 46 47, on right: 43
relop (57)
    on left: 48 49, on right: 46
additive_expression (58)
    on left: 50 51, on right: 46 47 50
addop (59)
    on left: 52 53, on right: 50
term (60)
    on left: 54 55, on right: 50 51 54
mulop (61)
    on left: 56 57, on right: 54
factor (62)
    on left: 58 59 60 61, on right: 54 55
call (63)
    on left: 62, on right: 60
args (64)
    on left: 63 64, on right: 62
arg_list (65)
    on left: 65 66, on right: 63 65


state 0

    0 $accept: . program $end
    1 program: . declaration_list
    2 declaration_list: . declaration_list declaration
    3                 | . declaration
    4 declaration: . var_declaration
    5            | . fun_declaration
    6 var_declaration: . type_specifier ID ';'
    7                | . type_specifier ID '[' NUM ']' ';'
    8 type_specifier: . "int"
    9               | . "void"
   10 fun_declaration: . type_specifier ID '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    program           go to state 3
    declaration_list  go to state 4
    declaration       go to state 5
    var_declaration   go to state 6
    type_specifier    go to state 7
    fun_declaration   go to state 8


state 1

    8 type_specifier: "int" .

    $default  reduce using rule 8 (type_specifier)


state 2

    9 type_specifier: "void" .

    $default  reduce using rule 9 (type_specifier)


state 3

    0 $accept: program . $end

    $end  shift, and go to state 9


state 4

    1 program: declaration_list .  [$end]
    2 declaration_list: declaration_list . declaration
    4 declaration: . var_declaration
    5            | . fun_declaration
    6 var_declaration: . type_specifier ID ';'
    7                | . type_specifier ID '[' NUM ']' ';'
    8 type_specifier: . "int"
    9               | . "void"
   10 fun_declaration: . type_specifier ID '(' params ')' compound_stmt

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 1 (program)

    declaration      go to state 10
    var_declaration  go to state 6
    type_specifier   go to state 7
    fun_declaration  go to state 8


state 5

    3 declaration_list: declaration .

    $default  reduce using rule 3 (declaration_list)


state 6

    4 declaration: var_declaration .

    $default  reduce using rule 4 (declaration)


state 7

    6 var_declaration: type_specifier . ID ';'
    7                | type_specifier . ID '[' NUM ']' ';'
   10 fun_declaration: type_specifier . ID '(' params ')' compound_stmt

    ID  shift, and go to state 11


state 8

    5 declaration: fun_declaration .

    $default  reduce using rule 5 (declaration)


state 9

    0 $accept: program $end .

    $default  accept


state 10

    2 declaration_list: declaration_list declaration .

    $default  reduce using rule 2 (declaration_list)


state 11

    6 var_declaration: type_specifier ID . ';'
    7                | type_specifier ID . '[' NUM ']' ';'
   10 fun_declaration: type_specifier ID . '(' params ')' compound_stmt

    ';'  shift, and go to state 12
    '['  shift, and go to state 13
    '('  shift, and go to state 14


state 12

    6 var_declaration: type_specifier ID ';' .

    $default  reduce using rule 6 (var_declaration)


state 13

    7 var_declaration: type_specifier ID '[' . NUM ']' ';'

    NUM  shift, and go to state 15


state 14

    8 type_specifier: . "int"
    9               | . "void"
   10 fun_declaration: type_specifier ID '(' . params ')' compound_stmt
   11 params: . param_list
   12       | . "void"
   13 param_list: . param_list ',' param
   14           | . param
   15 param: . type_specifier ID
   16      | . type_specifier ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 16

    type_specifier  go to state 17
    params          go to state 18
    param_list      go to state 19
    param           go to state 20


state 15

    7 var_declaration: type_specifier ID '[' NUM . ']' ';'

    ']'  shift, and go to state 21


state 16

    9 type_specifier: "void" .  [ID]
   12 params: "void" .  [')']

    ')'       reduce using rule 12 (params)
    $default  reduce using rule 9 (type_specifier)


state 17

   15 param: type_specifier . ID
   16      | type_specifier . ID '[' ']'

    ID  shift, and go to state 22


state 18

   10 fun_declaration: type_specifier ID '(' params . ')' compound_stmt

    ')'  shift, and go to state 23


state 19

   11 params: param_list .  [')']
   13 param_list: param_list . ',' param

    ','  shift, and go to state 24

    $default  reduce using rule 11 (params)


state 20

   14 param_list: param .

    $default  reduce using rule 14 (param_list)


state 21

    7 var_declaration: type_specifier ID '[' NUM ']' . ';'

    ';'  shift, and go to state 25


state 22

   15 param: type_specifier ID .  [')', ',']
   16      | type_specifier ID . '[' ']'

    '['  shift, and go to state 26

    $default  reduce using rule 15 (param)


state 23

   10 fun_declaration: type_specifier ID '(' params ')' . compound_stmt
   17 compound_stmt: . '{' local_declarations statement_list '}'

    '{'  shift, and go to state 27

    compound_stmt  go to state 28


state 24

    8 type_specifier: . "int"
    9               | . "void"
   13 param_list: param_list ',' . param
   15 param: . type_specifier ID
   16      | . type_specifier ID '[' ']'

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    type_specifier  go to state 17
    param           go to state 29


state 25

    7 var_declaration: type_specifier ID '[' NUM ']' ';' .

    $default  reduce using rule 7 (var_declaration)


state 26

   16 param: type_specifier ID '[' . ']'

    ']'  shift, and go to state 30


state 27

   17 compound_stmt: '{' . local_declarations statement_list '}'
   18 local_declarations: . local_declarations var_declaration
   19                   | .

    $default  reduce using rule 19 (local_declarations)

    local_declarations  go to state 31


state 28

   10 fun_declaration: type_specifier ID '(' params ')' compound_stmt .

    $default  reduce using rule 10 (fun_declaration)


state 29

   13 param_list: param_list ',' param .

    $default  reduce using rule 13 (param_list)


state 30

   16 param: type_specifier ID '[' ']' .

    $default  reduce using rule 16 (param)


state 31

    6 var_declaration: . type_specifier ID ';'
    7                | . type_specifier ID '[' NUM ']' ';'
    8 type_specifier: . "int"
    9               | . "void"
   17 compound_stmt: '{' local_declarations . statement_list '}'
   18 local_declarations: local_declarations . var_declaration
   20 statement_list: . statement_list statement
   21               | .  [NUM, ID, ';', '(', '{', '}', "break", "if", "while", "return", "switch"]

    "int"   shift, and go to state 1
    "void"  shift, and go to state 2

    $default  reduce using rule 21 (statement_list)

    var_declaration  go to state 32
    type_specifier   go to state 33
    statement_list   go to state 34


state 32

   18 local_declarations: local_declarations var_declaration .

    $default  reduce using rule 18 (local_declarations)


state 33

    6 var_declaration: type_specifier . ID ';'
    7                | type_specifier . ID '[' NUM ']' ';'

    ID  shift, and go to state 35


state 34

   17 compound_stmt: . '{' local_declarations statement_list '}'
   17              | '{' local_declarations statement_list . '}'
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28 expression_stmt: . expression ';'
   29                | . "break" ';'
   30                | . ';'
   31 selection_stmt: . "if" '(' expression ')' statement "endif"
   32               | . "if" '(' expression ')' statement "else" statement "endif"
   33 iteration_stmt: . "while" '(' expression ')' statement
   34 return_stmt: . "return" ';'
   35            | . "return" expression ';'
   36 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM       shift, and go to state 36
    ID        shift, and go to state 37
    ';'       shift, and go to state 38
    '('       shift, and go to state 39
    '{'       shift, and go to state 27
    '}'       shift, and go to state 40
    "break"   shift, and go to state 41
    "if"      shift, and go to state 42
    "while"   shift, and go to state 43
    "return"  shift, and go to state 44
    "switch"  shift, and go to state 45

    compound_stmt        go to state 46
    statement            go to state 47
    expression_stmt      go to state 48
    selection_stmt       go to state 49
    iteration_stmt       go to state 50
    return_stmt          go to state 51
    switch_stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 35

    6 var_declaration: type_specifier ID . ';'
    7                | type_specifier ID . '[' NUM ']' ';'

    ';'  shift, and go to state 12
    '['  shift, and go to state 13


state 36

   61 factor: NUM .

    $default  reduce using rule 61 (factor)


state 37

   44 var: ID .  [';', ']', ')', ',', '=', '<', "==", '+', '-', '*', '/']
   45    | ID . '[' expression ']'
   62 call: ID . '(' args ')'

    '['  shift, and go to state 60
    '('  shift, and go to state 61

    $default  reduce using rule 44 (var)


state 38

   30 expression_stmt: ';' .

    $default  reduce using rule 30 (expression_stmt)


state 39

   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   58       | '(' . expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM  shift, and go to state 36
    ID   shift, and go to state 37
    '('  shift, and go to state 39

    expression           go to state 62
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 40

   17 compound_stmt: '{' local_declarations statement_list '}' .

    $default  reduce using rule 17 (compound_stmt)


state 41

   29 expression_stmt: "break" . ';'

    ';'  shift, and go to state 63


state 42

   31 selection_stmt: "if" . '(' expression ')' statement "endif"
   32               | "if" . '(' expression ')' statement "else" statement "endif"

    '('  shift, and go to state 64


state 43

   33 iteration_stmt: "while" . '(' expression ')' statement

    '('  shift, and go to state 65


state 44

   34 return_stmt: "return" . ';'
   35            | "return" . expression ';'
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM  shift, and go to state 36
    ID   shift, and go to state 37
    ';'  shift, and go to state 66
    '('  shift, and go to state 39

    expression           go to state 67
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 45

   36 switch_stmt: "switch" . '(' expression ')' '{' case_stmts default_stmt '}'

    '('  shift, and go to state 68


state 46

   23 statement: compound_stmt .

    $default  reduce using rule 23 (statement)


state 47

   20 statement_list: statement_list statement .

    $default  reduce using rule 20 (statement_list)


state 48

   22 statement: expression_stmt .

    $default  reduce using rule 22 (statement)


state 49

   24 statement: selection_stmt .

    $default  reduce using rule 24 (statement)


state 50

   25 statement: iteration_stmt .

    $default  reduce using rule 25 (statement)


state 51

   26 statement: return_stmt .

    $default  reduce using rule 26 (statement)


state 52

   27 statement: switch_stmt .

    $default  reduce using rule 27 (statement)


state 53

   28 expression_stmt: expression . ';'

    ';'  shift, and go to state 69


state 54

   42 expression: var . '=' expression
   59 factor: var .  [';', ']', ')', ',', '<', "==", '+', '-', '*', '/']

    '='  shift, and go to state 70

    $default  reduce using rule 59 (factor)


state 55

   43 expression: simple_expression .

    $default  reduce using rule 43 (expression)


state 56

   46 simple_expression: additive_expression . relop additive_expression
   47                  | additive_expression .  [';', ']', ')', ',']
   48 relop: . '<'
   49      | . "=="
   50 additive_expression: additive_expression . addop term
   52 addop: . '+'
   53      | . '-'

    '<'   shift, and go to state 71
    "=="  shift, and go to state 72
    '+'   shift, and go to state 73
    '-'   shift, and go to state 74

    $default  reduce using rule 47 (simple_expression)

    relop  go to state 75
    addop  go to state 76


state 57

   51 additive_expression: term .  [';', ']', ')', ',', '<', "==", '+', '-']
   54 term: term . mulop factor
   56 mulop: . '*'
   57      | . '/'

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78

    $default  reduce using rule 51 (additive_expression)

    mulop  go to state 79


state 58

   55 term: factor .

    $default  reduce using rule 55 (term)


state 59

   60 factor: call .

    $default  reduce using rule 60 (factor)


state 60

   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   45    | ID '[' . expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM  shift, and go to state 36
    ID   shift, and go to state 37
    '('  shift, and go to state 39

    expression           go to state 80
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 61

   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'
   62     | ID '(' . args ')'
   63 args: . arg_list
   64     | .  [')']
   65 arg_list: . arg_list ',' expression
   66         | . expression

    NUM  shift, and go to state 36
    ID   shift, and go to state 37
    '('  shift, and go to state 39

    $default  reduce using rule 64 (args)

    expression           go to state 81
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
    args                 go to state 82
    arg_list             go to state 83


state 62

   58 factor: '(' expression . ')'

    ')'  shift, and go to state 84


state 63

   29 expression_stmt: "break" ';' .

    $default  reduce using rule 29 (expression_stmt)


state 64

   31 selection_stmt: "if" '(' . expression ')' statement "endif"
   32               | "if" '(' . expression ')' statement "else" statement "endif"
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM  shift, and go to state 36
    ID   shift, and go to state 37
    '('  shift, and go to state 39

    expression           go to state 85
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 65

   33 iteration_stmt: "while" '(' . expression ')' statement
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM  shift, and go to state 36
    ID   shift, and go to state 37
    '('  shift, and go to state 39

    expression           go to state 86
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 66

   34 return_stmt: "return" ';' .

    $default  reduce using rule 34 (return_stmt)


state 67

   35 return_stmt: "return" expression . ';'

    ';'  shift, and go to state 87


state 68

   36 switch_stmt: "switch" '(' . expression ')' '{' case_stmts default_stmt '}'
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM  shift, and go to state 36
    ID   shift, and go to state 37
    '('  shift, and go to state 39

    expression           go to state 88
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 69

   28 expression_stmt: expression ';' .

    $default  reduce using rule 28 (expression_stmt)


state 70

   42 expression: . var '=' expression
   42           | var '=' . expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM  shift, and go to state 36
    ID   shift, and go to state 37
    '('  shift, and go to state 39

    expression           go to state 89
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 71

   48 relop: '<' .

    $default  reduce using rule 48 (relop)


state 72

   49 relop: "==" .

    $default  reduce using rule 49 (relop)


state 73

   52 addop: '+' .

    $default  reduce using rule 52 (addop)


state 74

   53 addop: '-' .

    $default  reduce using rule 53 (addop)


state 75

   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: additive_expression relop . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM  shift, and go to state 36
    ID   shift, and go to state 37
    '('  shift, and go to state 39

    var                  go to state 90
    additive_expression  go to state 91
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 76

   44 var: . ID
   45    | . ID '[' expression ']'
   50 additive_expression: additive_expression addop . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM  shift, and go to state 36
    ID   shift, and go to state 37
    '('  shift, and go to state 39

    var     go to state 90
    term    go to state 92
    factor  go to state 58
    call    go to state 59


state 77

   56 mulop: '*' .

    $default  reduce using rule 56 (mulop)


state 78

   57 mulop: '/' .

    $default  reduce using rule 57 (mulop)


state 79

   44 var: . ID
   45    | . ID '[' expression ']'
   54 term: term mulop . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM  shift, and go to state 36
    ID   shift, and go to state 37
    '('  shift, and go to state 39

    var     go to state 90
    factor  go to state 93
    call    go to state 59


state 80

   45 var: ID '[' expression . ']'

    ']'  shift, and go to state 94


state 81

   66 arg_list: expression .

    $default  reduce using rule 66 (arg_list)


state 82

   62 call: ID '(' args . ')'

    ')'  shift, and go to state 95


state 83

   63 args: arg_list .  [')']
   65 arg_list: arg_list . ',' expression

    ','  shift, and go to state 96

    $default  reduce using rule 63 (args)


state 84

   58 factor: '(' expression ')' .

    $default  reduce using rule 58 (factor)


state 85

   31 selection_stmt: "if" '(' expression . ')' statement "endif"
   32               | "if" '(' expression . ')' statement "else" statement "endif"

    ')'  shift, and go to state 97


state 86

   33 iteration_stmt: "while" '(' expression . ')' statement

    ')'  shift, and go to state 98


state 87

   35 return_stmt: "return" expression ';' .

    $default  reduce using rule 35 (return_stmt)


state 88

   36 switch_stmt: "switch" '(' expression . ')' '{' case_stmts default_stmt '}'

    ')'  shift, and go to state 99


state 89

   42 expression: var '=' expression .

    $default  reduce using rule 42 (expression)


state 90

   59 factor: var .

    $default  reduce using rule 59 (factor)


state 91

   46 simple_expression: additive_expression relop additive_expression .  [';', ']', ')', ',']
   50 additive_expression: additive_expression . addop term
   52 addop: . '+'
   53      | . '-'

    '+'  shift, and go to state 73
    '-'  shift, and go to state 74

    $default  reduce using rule 46 (simple_expression)

    addop  go to state 76


state 92

   50 additive_expression: additive_expression addop term .  [';', ']', ')', ',', '<', "==", '+', '-']
   54 term: term . mulop factor
   56 mulop: . '*'
   57      | . '/'

    '*'  shift, and go to state 77
    '/'  shift, and go to state 78

    $default  reduce using rule 50 (additive_expression)

    mulop  go to state 79


state 93

   54 term: term mulop factor .

    $default  reduce using rule 54 (term)


state 94

   45 var: ID '[' expression ']' .

    $default  reduce using rule 45 (var)


state 95

   62 call: ID '(' args ')' .

    $default  reduce using rule 62 (call)


state 96

   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'
   65 arg_list: arg_list ',' . expression

    NUM  shift, and go to state 36
    ID   shift, and go to state 37
    '('  shift, and go to state 39

    expression           go to state 100
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 97

   17 compound_stmt: . '{' local_declarations statement_list '}'
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28 expression_stmt: . expression ';'
   29                | . "break" ';'
   30                | . ';'
   31 selection_stmt: . "if" '(' expression ')' statement "endif"
   31               | "if" '(' expression ')' . statement "endif"
   32               | . "if" '(' expression ')' statement "else" statement "endif"
   32               | "if" '(' expression ')' . statement "else" statement "endif"
   33 iteration_stmt: . "while" '(' expression ')' statement
   34 return_stmt: . "return" ';'
   35            | . "return" expression ';'
   36 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM       shift, and go to state 36
    ID        shift, and go to state 37
    ';'       shift, and go to state 38
    '('       shift, and go to state 39
    '{'       shift, and go to state 27
    "break"   shift, and go to state 41
    "if"      shift, and go to state 42
    "while"   shift, and go to state 43
    "return"  shift, and go to state 44
    "switch"  shift, and go to state 45

    compound_stmt        go to state 46
    statement            go to state 101
    expression_stmt      go to state 48
    selection_stmt       go to state 49
    iteration_stmt       go to state 50
    return_stmt          go to state 51
    switch_stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 98

   17 compound_stmt: . '{' local_declarations statement_list '}'
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28 expression_stmt: . expression ';'
   29                | . "break" ';'
   30                | . ';'
   31 selection_stmt: . "if" '(' expression ')' statement "endif"
   32               | . "if" '(' expression ')' statement "else" statement "endif"
   33 iteration_stmt: . "while" '(' expression ')' statement
   33               | "while" '(' expression ')' . statement
   34 return_stmt: . "return" ';'
   35            | . "return" expression ';'
   36 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM       shift, and go to state 36
    ID        shift, and go to state 37
    ';'       shift, and go to state 38
    '('       shift, and go to state 39
    '{'       shift, and go to state 27
    "break"   shift, and go to state 41
    "if"      shift, and go to state 42
    "while"   shift, and go to state 43
    "return"  shift, and go to state 44
    "switch"  shift, and go to state 45

    compound_stmt        go to state 46
    statement            go to state 102
    expression_stmt      go to state 48
    selection_stmt       go to state 49
    iteration_stmt       go to state 50
    return_stmt          go to state 51
    switch_stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 99

   36 switch_stmt: "switch" '(' expression ')' . '{' case_stmts default_stmt '}'

    '{'  shift, and go to state 103


state 100

   65 arg_list: arg_list ',' expression .

    $default  reduce using rule 65 (arg_list)


state 101

   31 selection_stmt: "if" '(' expression ')' statement . "endif"
   32               | "if" '(' expression ')' statement . "else" statement "endif"

    "endif"  shift, and go to state 104
    "else"   shift, and go to state 105


state 102

   33 iteration_stmt: "while" '(' expression ')' statement .

    $default  reduce using rule 33 (iteration_stmt)


state 103

   36 switch_stmt: "switch" '(' expression ')' '{' . case_stmts default_stmt '}'
   37 case_stmts: . case_stmts case_stmt
   38           | .

    $default  reduce using rule 38 (case_stmts)

    case_stmts  go to state 106


state 104

   31 selection_stmt: "if" '(' expression ')' statement "endif" .

    $default  reduce using rule 31 (selection_stmt)


state 105

   17 compound_stmt: . '{' local_declarations statement_list '}'
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28 expression_stmt: . expression ';'
   29                | . "break" ';'
   30                | . ';'
   31 selection_stmt: . "if" '(' expression ')' statement "endif"
   32               | . "if" '(' expression ')' statement "else" statement "endif"
   32               | "if" '(' expression ')' statement "else" . statement "endif"
   33 iteration_stmt: . "while" '(' expression ')' statement
   34 return_stmt: . "return" ';'
   35            | . "return" expression ';'
   36 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM       shift, and go to state 36
    ID        shift, and go to state 37
    ';'       shift, and go to state 38
    '('       shift, and go to state 39
    '{'       shift, and go to state 27
    "break"   shift, and go to state 41
    "if"      shift, and go to state 42
    "while"   shift, and go to state 43
    "return"  shift, and go to state 44
    "switch"  shift, and go to state 45

    compound_stmt        go to state 46
    statement            go to state 107
    expression_stmt      go to state 48
    selection_stmt       go to state 49
    iteration_stmt       go to state 50
    return_stmt          go to state 51
    switch_stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 106

   36 switch_stmt: "switch" '(' expression ')' '{' case_stmts . default_stmt '}'
   37 case_stmts: case_stmts . case_stmt
   39 case_stmt: . "case" NUM ':' statement_list
   40 default_stmt: . "default" ':' statement_list
   41             | .  ['}']

    "case"     shift, and go to state 108
    "default"  shift, and go to state 109

    $default  reduce using rule 41 (default_stmt)

    case_stmt     go to state 110
    default_stmt  go to state 111


state 107

   32 selection_stmt: "if" '(' expression ')' statement "else" statement . "endif"

    "endif"  shift, and go to state 112


state 108

   39 case_stmt: "case" . NUM ':' statement_list

    NUM  shift, and go to state 113


state 109

   40 default_stmt: "default" . ':' statement_list

    ':'  shift, and go to state 114


state 110

   37 case_stmts: case_stmts case_stmt .

    $default  reduce using rule 37 (case_stmts)


state 111

   36 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt . '}'

    '}'  shift, and go to state 115


state 112

   32 selection_stmt: "if" '(' expression ')' statement "else" statement "endif" .

    $default  reduce using rule 32 (selection_stmt)


state 113

   39 case_stmt: "case" NUM . ':' statement_list

    ':'  shift, and go to state 116


state 114

   20 statement_list: . statement_list statement
   21               | .
   40 default_stmt: "default" ':' . statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 117


state 115

   36 switch_stmt: "switch" '(' expression ')' '{' case_stmts default_stmt '}' .

    $default  reduce using rule 36 (switch_stmt)


state 116

   20 statement_list: . statement_list statement
   21               | .
   39 case_stmt: "case" NUM ':' . statement_list

    $default  reduce using rule 21 (statement_list)

    statement_list  go to state 118


state 117

   17 compound_stmt: . '{' local_declarations statement_list '}'
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28 expression_stmt: . expression ';'
   29                | . "break" ';'
   30                | . ';'
   31 selection_stmt: . "if" '(' expression ')' statement "endif"
   32               | . "if" '(' expression ')' statement "else" statement "endif"
   33 iteration_stmt: . "while" '(' expression ')' statement
   34 return_stmt: . "return" ';'
   35            | . "return" expression ';'
   36 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   40 default_stmt: "default" ':' statement_list .  ['}']
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM       shift, and go to state 36
    ID        shift, and go to state 37
    ';'       shift, and go to state 38
    '('       shift, and go to state 39
    '{'       shift, and go to state 27
    "break"   shift, and go to state 41
    "if"      shift, and go to state 42
    "while"   shift, and go to state 43
    "return"  shift, and go to state 44
    "switch"  shift, and go to state 45

    $default  reduce using rule 40 (default_stmt)

    compound_stmt        go to state 46
    statement            go to state 47
    expression_stmt      go to state 48
    selection_stmt       go to state 49
    iteration_stmt       go to state 50
    return_stmt          go to state 51
    switch_stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59


state 118

   17 compound_stmt: . '{' local_declarations statement_list '}'
   20 statement_list: statement_list . statement
   22 statement: . expression_stmt
   23          | . compound_stmt
   24          | . selection_stmt
   25          | . iteration_stmt
   26          | . return_stmt
   27          | . switch_stmt
   28 expression_stmt: . expression ';'
   29                | . "break" ';'
   30                | . ';'
   31 selection_stmt: . "if" '(' expression ')' statement "endif"
   32               | . "if" '(' expression ')' statement "else" statement "endif"
   33 iteration_stmt: . "while" '(' expression ')' statement
   34 return_stmt: . "return" ';'
   35            | . "return" expression ';'
   36 switch_stmt: . "switch" '(' expression ')' '{' case_stmts default_stmt '}'
   39 case_stmt: "case" NUM ':' statement_list .  ['}', "case", "default"]
   42 expression: . var '=' expression
   43           | . simple_expression
   44 var: . ID
   45    | . ID '[' expression ']'
   46 simple_expression: . additive_expression relop additive_expression
   47                  | . additive_expression
   50 additive_expression: . additive_expression addop term
   51                    | . term
   54 term: . term mulop factor
   55     | . factor
   58 factor: . '(' expression ')'
   59       | . var
   60       | . call
   61       | . NUM
   62 call: . ID '(' args ')'

    NUM       shift, and go to state 36
    ID        shift, and go to state 37
    ';'       shift, and go to state 38
    '('       shift, and go to state 39
    '{'       shift, and go to state 27
    "break"   shift, and go to state 41
    "if"      shift, and go to state 42
    "while"   shift, and go to state 43
    "return"  shift, and go to state 44
    "switch"  shift, and go to state 45

    $default  reduce using rule 39 (case_stmt)

    compound_stmt        go to state 46
    statement            go to state 47
    expression_stmt      go to state 48
    selection_stmt       go to state 49
    iteration_stmt       go to state 50
    return_stmt          go to state 51
    switch_stmt          go to state 52
    expression           go to state 53
    var                  go to state 54
    simple_expression    go to state 55
    additive_expression  go to state 56
    term                 go to state 57
    factor               go to state 58
    call                 go to state 59
